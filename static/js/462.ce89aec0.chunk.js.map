{"version":3,"file":"static/js/462.ce89aec0.chunk.js","mappings":"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","sources":["components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","redux/contactSelectors.js","components/ContactsList/ContactList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","redux/filterSlice.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledContactListText = styled.p`\nfont-weight: 600;\nmargin-top: 15px;\n`;\n\nexport const StyledDeleteButton = styled.button`\ncursor: pointer;\nbackground: transparent;\nborder: none;\nfont-size: 20px;\ncolor: red;\n`;","import {\n  StyledContactListText,\n  StyledDeleteButton,\n} from './ContactListItem.styled';\nimport { MdOutlineDeleteForever } from 'react-icons/md';\nimport { useDispatch } from 'react-redux';\nimport { DeleteContacts } from '../../redux/contactsOperations';\n\nexport const ContactListItem = ({ id, contact: { name, phone } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <StyledContactListText>Name: {name}</StyledContactListText>\n      <StyledContactListText>Number: {phone}</StyledContactListText>\n      <StyledDeleteButton\n        type=\"button\"\n        onClick={() => {\n          dispatch(DeleteContacts(id));\n        }}\n      >\n        <MdOutlineDeleteForever />\n      </StyledDeleteButton>\n    </>\n  );\n};\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { useSelector } from 'react-redux';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { selectAllContacts } from '../../redux/contactSelectors';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectAllContacts);\n\n  return (\n    <ul>\n      {contacts.map(({ id, ...contact }) => (\n        <li key={id}>\n          <ContactListItem id={id} contact={contact} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\nimport { Field, Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\nbackground-color: tomato; \ndisplay: flex;\nflex-direction: column;\ngap: 20px;\nmargin: 20px auto;\nwidth: 300px;\nheight: 120px;\npadding: 60px;\nborder-radius: 10px;\n`;\n\nexport const StyledFild = styled(Field)`\npadding: 4px;\nborder-radius: 4px; \ntext-align: center;\n`;\n\nexport const AddButton = styled.button`\nborder-radius: 4px;\nwidth: 100px;\npadding: 6px;\ncursor: pointer;\ncolor: grey;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport { StyledForm, StyledFild, AddButton } from './ContactForm.styled';\nimport * as Yup from 'yup';\n// import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from '../../redux/contactsSlice';\nimport { fetchContacts } from '../../redux/contactsOperations';\nimport { AddContacts } from '../../redux/contactsOperations';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .matches(/^[A-Za-zА-Яа-яЁё\\s]+$/, 'Invalid name')\n    .required('This is required!')\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!'),\n  number: Yup.string()\n    .matches(/^\\+?[0-9]{1,3}-?[0-9]/, 'Invalid number')\n    .required('This is required!')\n    .min(6, 'Too Short!')\n    .max(20, 'Too Long!'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(fetchContacts);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n      onSubmit={(values, actions) => {\n        const checkName = values.name;\n\n        if (\n          contacts.some(\n            contact => contact.name.toLowerCase() === checkName.toLowerCase()\n          )\n        ) {\n          alert(`${checkName} already recorded in the directory`);\n          return;\n        }\n        dispatch(AddContacts({ ...values }));\n        actions.resetForm();\n      }}\n    >\n      <StyledForm>\n        <label>\n          <StyledFild name=\"name\" placeholder=\"entert name here\" />\n          <ErrorMessage name=\"name\" />\n        </label>\n        <label>\n          <StyledFild name=\"number\" placeholder=\"entert number here\" />\n          <ErrorMessage name=\"number\" />\n        </label>\n        <AddButton type=\"submit\">add contact</AddButton>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledFilter = styled.input`\ndisplay: block;\nmargin: 0 auto;\nwidth: 250px;\ntext-align: center;\nborder-radius: 4px;\npadding: 4px;\n`;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState: '',\n  reducers: {\n    changeFilter: (state, action) => (state = `${action.payload}`),\n  },\n});\nexport const getFilter = state => state.filter;\nexport const { changeFilter } = filterSlice.actions;\n","import { StyledFilter } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter, getFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <StyledFilter\n      placeholder=\"filter here\"\n      type=\"text\"\n      value={filter}\n      onChange={event => dispatch(changeFilter(event.target.value))}\n    />\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactsList } from 'components/ContactsList/ContactList';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contactsOperations';\nimport { selectLoading } from '../redux/contactSelectors';\n\nexport default function Contacts () {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your Contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["StyledContactListText","styled","_templateObject","_taggedTemplateLiteral","StyledDeleteButton","_templateObject2","ContactListItem","_ref","id","_ref$contact","contact","name","phone","dispatch","useDispatch","_jsxs","_Fragment","children","_jsx","type","onClick","DeleteContacts","MdOutlineDeleteForever","selectLoading","state","contacts","loading","selectAllContacts","items","ContactsList","useSelector","map","_objectWithoutProperties","_excluded","StyledForm","Form","StyledFild","Field","AddButton","_templateObject3","schema","Yup","shape","matches","required","min","max","number","ContactForm","fetchContacts","Formik","initialValues","validationSchema","onSubmit","values","actions","checkName","some","toLowerCase","alert","concat","AddContacts","_objectSpread","resetForm","placeholder","ErrorMessage","StyledFilter","filterSlice","createSlice","initialState","reducers","changeFilter","action","payload","getFilter","filter","Filter","value","onChange","event","target","Contacts","isLoading","useEffect","Helmet"],"sourceRoot":""}